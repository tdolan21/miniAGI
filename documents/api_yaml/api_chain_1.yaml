_type: api_chain
api_answer_chain:
  _type: llm_chain
  llm:
    _type: openai-chat
    max_tokens: null
    model: gpt-3.5-turbo-16k
    model_name: gpt-3.5-turbo-16k
    n: 1
    request_timeout: null
    stream: false
    temperature: 0.0
  llm_kwargs: {}
  memory: null
  metadata: null
  output_key: text
  output_parser:
    _type: default
  prompt:
    _type: prompt
    input_variables:
    - api_docs
    - question
    - api_url
    - api_response
    output_parser: null
    partial_variables: {}
    template: 'You are given the below API Documentation:

      {api_docs}

      Using this documentation, generate the full API url to call for answering the
      user question.

      You should build the API url in order to get a response that is as short as
      possible, while still getting the necessary information to answer the question.
      Pay attention to deliberately exclude any unnecessary pieces of data in the
      API call.


      Question:{question}

      API url: {api_url}


      Here is the response from the API:


      {api_response}


      Summarize this response to answer the original question.


      Summary:'
    template_format: f-string
    validate_template: true
  return_final_only: true
  tags: null
  verbose: false
api_docs: 'API documentation:

  Endpoint: https://api.themoviedb.org/3

  GET /search/movie


  This API is for searching movies.


  Query parameters table:

  language | string | Pass a ISO 639-1 value to display translated data for the fields
  that support it. minLength: 2, pattern: ([a-z]{2})-([A-Z]{2}), default: en-US |
  optional

  query | string | Pass a text query to search. This value should be URI encoded.
  minLength: 1 | required

  page | integer | Specify which page to query. minimum: 1, maximum: 1000, default:
  1 | optional

  include_adult | boolean | Choose whether to include adult (pornography) content
  in the results. default | optional

  region | string | Specify a ISO 3166-1 code to filter release dates. Must be uppercase.
  pattern: ^[A-Z]{2}$ | optional

  year | integer  | optional

  primary_release_year | integer | optional


  Response schema (JSON object):

  page | integer | optional

  total_results | integer | optional

  total_pages | integer | optional

  results | array[object] (Movie List Result Object)


  Each object in the "results" key has the following schema:

  poster_path | string or null | optional

  adult | boolean | optional

  overview | string | optional

  release_date | string | optional

  genre_ids | array[integer] | optional

  id | integer | optional

  original_title | string | optional

  original_language | string | optional

  title | string | optional

  backdrop_path | string or null | optional

  popularity | number | optional

  vote_count | integer | optional

  video | boolean | optional

  vote_average | number | optional'
api_request_chain:
  _type: llm_chain
  llm:
    _type: openai-chat
    max_tokens: null
    model: gpt-3.5-turbo-16k
    model_name: gpt-3.5-turbo-16k
    n: 1
    request_timeout: null
    stream: false
    temperature: 0.0
  llm_kwargs: {}
  memory: null
  metadata: null
  output_key: text
  output_parser:
    _type: default
  prompt:
    _type: prompt
    input_variables:
    - api_docs
    - question
    output_parser: null
    partial_variables: {}
    template: 'You are given the below API Documentation:

      {api_docs}

      Using this documentation, generate the full API url to call for answering the
      user question.

      You should build the API url in order to get a response that is as short as
      possible, while still getting the necessary information to answer the question.
      Pay attention to deliberately exclude any unnecessary pieces of data in the
      API call.


      Question:{question}

      API url:'
    template_format: f-string
    validate_template: true
  return_final_only: true
  tags: null
  verbose: false
memory: null
metadata: null
output_key: output
question_key: question
tags: null
verbose: true
